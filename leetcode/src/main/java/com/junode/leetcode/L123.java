package com.junode.leetcode;

import org.junit.Test;

import java.util.Arrays;

/**
 * @author junode
 * @version 1.0.0
 * @Description 买卖股票最佳时机3 最多买卖两次，获得最大的现金
 * @createTime 2024年05月24日 17:36:00
 */
public class L123 {

    /**
     * 动态规划5步骤走
     * 1、dp状态的定义。
     * dp状态现在相较于L122那一道的状态多了。
     * dp[i][0]：没有操作
     * dp[i][1]：第i天第一次持有时最大现金
     * d[[i][2]：第i天第一次卖出时持有的最大现金
     * dp[i][3]：第i天第二次持有时的最大现金
     * d[[i][4]：第i天第二次卖出时的最大现金
     * 2、状态转义公式/递推公式
     * dp[i][0] = dp[i-1][0]; // 昨天没有操作
     * dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])// 之前有买入操作，一直持有到现在；或者之前没有买入操作，当天进行第一次买入操作
     * dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]) // 第一次卖出操作，可能之前就卖出了，一直到现在，或者是当天进行的第一次卖出操作
     * dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]) // 第二次的买入操作，可能之前有进行买入操作，一直延续到现在；也可能是当天进行的第二次买入操作
     * dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]) // 第二次卖出操作，可能之前就有了卖出操作，一直延续到现在，或者是当天进行了第二次卖出操作
     * 3、初始化
     * dp[0][0] = 0 // 第一天没有进行操作，从而现金是0
     * dp[0][1] = -prices[0] // 第一天进行第一次持有操作，从而现金减少
     * dp[0][2] = 0 // 第一天进行第一次的卖出操作，同天的买入和卖出，从而现金是0
     * dp[0][3] = -prices[0] // 第一天进行第二次持有操作，从而现金减少
     * dp[0][4] = 0 // 第一天进行第第二次的卖出操作，同天的买入和卖出，从而现金是0
     * 4、遍历数组： 依赖前面的状态，从而是 由前往后遍历。
     * 5、打印dp，我们获取的结果就是dp[len-1][4]
     */
    @Test
    public void dp() {
        int[] prices = new int[]{7, 1, 5, 3, 6, 4};

        // 状态定义和初始化
        int[][] dp = new int[prices.length][5];
        dp[0][0] = 0;// 第一天没有进行操作，从而现金是0
        dp[0][1] = -prices[0]; // 第一天进行第一次持有操作，从而现金减少
        dp[0][2] = 0; // 第一天进行第一次的卖出操作，同天的买入和卖出，从而现金是0
        dp[0][3] = -prices[0]; // 第一天进行第二次持有操作，从而现金减少
        dp[0][4] = 0; // 第一天进行第第二次的卖出操作，同天的买入和卖出，从而现金是0

        // 遍历数组，实现递推公式
        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = dp[i - 1][0]; // 昨天没有操作
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]); // 之前有买入操作，一直持有到现在；或者之前没有买入操作，当天进行第一次买入操作
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);  // 第一次卖出操作，可能之前就卖出了，一直到现在，或者是当天进行的第一次卖出操作
            dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);  // 第二次的买入操作，可能之前有进行买入操作，一直延续到现在；也可能是当天进行的第二次买入操作
            dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);  // 第二次卖出操作，可能之前就有了卖出操作，一直延续到现在，或者是当天进行了第二次卖出操作
        }
        for (int[] ints : dp) {
            System.out.println("Arrays.toString(ints) = " + Arrays.toString(ints));
        }
        System.out.println("dp = " + dp[prices.length-1][4]);
    }
}
